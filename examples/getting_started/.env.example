# 🌟 This is an example .env file for envist

DEBUG <bool> = true           # 🐞 Enable debug mode (true/false)
HOST <str> = localhost        # 🏠 Host address for the server
PORT <int> = 8000             # 🚪 Port number for the server
URL <str> = ${HOST}:${PORT}   # 🌐 URL without scheme (host:port)
SCHEMA <str> = http           # 🔒 Scheme (http or https)
DB_NAME <str> = my_database   # 🗄️ Database name
DATABASE_URL <str> = ${SCHEMA}://${HOST}:${PORT}/${DB_NAME} # 🛤️ Full database URL


# 🧑‍💻 Simple types
NAME <str> = John Doe         # 👤 User's name
AGE <int> = 25                # 🎂 User's age
HEIGHT <float> = 5.9          # 📏 User's height in feet
IS_ACTIVE <bool> = true       # ✅ Is the user active? (true/false)

# 🔢 Nested list types
NUMBERS <list<int>> = 1,2,3,4,5           # 📋 List of numbers
SCORES <list<float>> = 95.5,87.2,92.1     # 🏆 List of scores (float)
TAGS <list<str>> = python,dev,backend     # 🏷️ List of tags

# 🗂️ Nested dict types
CONFIG <dict<str, int>> = timeout=30,retries=3,port=8080         # ⚙️ Config with string keys and int values
SETTINGS <dict<str, str>> = host=localhost,db=myapp,env=dev      # 🛠️ Settings with string keys and string values

# 🧩 Json-like structures
JSON_DATA <json> = {"name": "John", "age": 30, "city": "New York"} # 🗃️ JSON data example

# 🚫 Nested casting not supported
# 🏗️ Deeply nested types
MATRIX <list<list<int>>> = [[1,2,3],[4,5,6],[7,8,9]]             # 🧮 Matrix as list of lists
USERS <list<dict<str, str>>> = {"name":"John","role":"admin"},{"name":"Jane","role":"user"} # 👥 List of user dicts

# 🧬 Complex nested structures
COMPLEX <dict<str, list<int>>> = group1=[1,2,3],group2=[4,5,6]   # 🗃️ Dict with list values
NESTED_CONFIG <dict<str, dict<str, int>>> = {"db":{"port":5432,"timeout":30},"cache":{"ttl":3600,"size":1000}} # 🏗️ Nested dicts

# 🔗 Variable resolution with casting
BASE_NUMBERS <list<int>> = 1,2,3                                 # 🏁 Base list of numbers
EXTENDED_NUMBERS <list<int>> = ${BASE_NUMBERS},4,5,6             # ➕ Extended list using variable

